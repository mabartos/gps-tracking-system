/*------------------------------*/
/* 1. ORIGINAL SELECT - QUERY 3 */
/*------------------------------*/

SELECT dev.name as "Device model",
        MIN(app.program_ver) as "Oldest version",
        MAX(app.program_ver) as "Newest version"        
FROM xbartos5.report_fact base 
INNER JOIN xbartos5.device_dimension dev ON dev.device_key = base.device_key 
INNER JOIN xbartos5.app_dimension app ON app.app_key = base.app_key
GROUP BY dev.name
ORDER BY dev.name ASC;

/*-----------------------------*/
/* 2. EXPLAIN ANALYZE ORIGINAL */
/*-----------------------------*/
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=141649.94..141650.29 rows=137 width=74) (actual time=3787.843..3787.852 rows=136 loops=1)
   Sort Key: dev.name
   Sort Method: quicksort  Memory: 34kB
   ->  HashAggregate  (cost=141643.71..141645.08 rows=137 width=74) (actual time=3787.631..3787.672 rows=136 loops=1)
         Group Key: dev.name
         Batches: 1  Memory Usage: 64kB
         ->  Hash Join  (cost=70.00..112991.39 rows=3820309 width=38) (actual time=0.321..2309.445 rows=3820250 loops=1)
               Hash Cond: (base.app_key = app.app_key)
               ->  Hash Join  (cost=31.43..102891.04 rows=3820309 width=18) (actual time=0.296..1475.374 rows=3820250 loops=1)
                     Hash Cond: (base.device_key = dev.device_key)
                     ->  Seq Scan on report_fact base  (cost=0.00..92773.09 rows=3820309 width=16) (actual time=0.007..467.279 rows=3820250 loops=1)
                     ->  Hash  (cost=22.30..22.30 rows=730 width=18) (actual time=0.283..0.283 rows=730 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 46kB
                           ->  Seq Scan on device_dimension dev  (cost=0.00..22.30 rows=730 width=18) (actual time=0.004..0.148 rows=730 loops=1)
               ->  Hash  (cost=22.70..22.70 rows=1270 width=36) (actual time=0.018..0.019 rows=17 loops=1)
                     Buckets: 2048  Batches: 1  Memory Usage: 17kB
                     ->  Seq Scan on app_dimension app  (cost=0.00..22.70 rows=1270 width=36) (actual time=0.009..0.012 rows=17 loops=1)
 Planning Time: 0.278 ms
 Execution Time: 3787.937 ms
(19 rows)

/*----------------------------------*/
/* 3. COMMENT PROPOSED OPTIMIZATION */
/*----------------------------------*/

I've created a materialized view with Device information. 
The view is also used in Query 4 and Query 5.
The materialized view inner join particular tables and also add attribute about next APP and PDA run time.
As the materialized views are not refreshed automatically, it's neccessary to ensure that there's some approach for manual refresh of the items in the view.
In order to amortize the costs to create the materialized view, IMO, there should be at least one query execution before refreshing the whole view again.
In this case it'd be kinda contraproductive to use the materialized view, because the items wouldn't be precomputed so far.

The execution time was decreased from 3787ms to 1816ms.

/*-----------------------------*/
/* 4. IMPLEMENTED OPTIMIZATION */
/*-----------------------------*/

CREATE MATERIALIZED VIEW xbartos5.DeviceInfo(pda_imei, device, program_ver, app_run_time, next_app_run_time, pda_run_time, next_pda_run_time) AS
SELECT
        dev.pda_imei,
        dev.name,
        app.program_ver,
        base.app_run_time,
        LEAD(base.app_run_time, 1) OVER (
            PARTITION BY base.device_key
            ORDER BY base.device_key
        ) as next_app_run_time,
        base.pda_run_time,
        LEAD(base.pda_run_time, 1) OVER (
            PARTITION BY base.device_key
            ORDER BY base.device_key
        ) as next_pda_run_time
    FROM xbartos5.report_fact base
    INNER JOIN xbartos5.device_dimension dev ON base.device_key = dev.device_key
    INNER JOIN xbartos5.app_dimension app ON base.app_key = app.app_key;

CREATE INDEX DeviceInfo_idx ON xbartos5.DeviceInfo(device);
CREATE INDEX DeviceInfo_prog_ver_idx ON xbartos5.DeviceInfo(program_ver);

SELECT info.device as "Device model",
        MIN(info.program_ver) as "Oldest version",
        MAX(info.program_ver) as "Newest version"        
FROM xbartos5.DeviceInfo info 
GROUP BY info.device
ORDER BY info.device ASC;


/*------------------------------*/
/* 5. EXPLAIN ANALYZE OPTIMIZED */
/*------------------------------*/
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=107933.96..107934.28 rows=127 width=74) (actual time=1816.170..1816.177 rows=136 loops=1)
   Sort Key: device
   Sort Method: quicksort  Memory: 34kB
   ->  HashAggregate  (cost=107928.26..107929.53 rows=127 width=74) (actual time=1815.943..1815.988 rows=136 loops=1)
         Group Key: device
         Batches: 1  Memory Usage: 64kB
         ->  Seq Scan on deviceinfo info  (cost=0.00..79276.86 rows=3820186 width=14) (actual time=0.015..256.983 rows=3820250 loops=1)
 Planning Time: 0.128 ms
 Execution Time: 1816.259 ms
(9 rows)
